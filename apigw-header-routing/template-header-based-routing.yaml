# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for API Gateway with Lambda integrations, ACM, and Route53'

Parameters:
  DomainName:
    Type: String
    Default: api.example.com
    Description: Custom domain name for API Gateway
  
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: ID of the existing Route53 hosted zone (e.g., Z23ABC4XYZL05B)
  
  LambdaRuntime:
    Type: String
    Default: nodejs18.x
    Description: Runtime for Lambda functions
    
  CertificateArn:
    Type: String
    Description: ARN of an existing ACM certificate for the domain

Resources:
  # Lambda Functions for each API
  ProductsV1Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProductsV1Function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: 'Hello from products v1' })
            };
          };
      Timeout: 10

  ProductsV2Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProductsV2Function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: 'Hello from products v2' })
            };
          };
      Timeout: 10

  OrdersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrdersFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: 'Hello from orders' })
            };
          };
      Timeout: 10

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # API Gateway REST APIs
  ProductsV1Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ProductsV1
      Description: Products API V1
      EndpointConfiguration:
        Types:
          - REGIONAL

  ProductsV2Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ProductsV2
      Description: Products API V2
      EndpointConfiguration:
        Types:
          - REGIONAL

  OrdersApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Orders
      Description: Orders API
      EndpointConfiguration:
        Types:
          - REGIONAL

  ProductsV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ProductsV1Api
      ParentId: !GetAtt ProductsV1Api.RootResourceId
      PathPart: products

  ProductsV2Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ProductsV2Api
      ParentId: !GetAtt ProductsV2Api.RootResourceId
      PathPart: products

  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref OrdersApi
      ParentId: !GetAtt OrdersApi.RootResourceId
      PathPart: orders

  ProductsV1Method:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ProductsV1Api
      ResourceId: !Ref ProductsV1Resource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsV1Function.Arn}/invocations

  ProductsV2Method:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ProductsV2Api
      ResourceId: !Ref ProductsV2Resource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsV2Function.Arn}/invocations

  OrdersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref OrdersApi
      ResourceId: !Ref OrdersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations

  # API Gateway Deployments
  ProductsV1Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProductsV1Method
    Properties:
      RestApiId: !Ref ProductsV1Api
      Description: ProductsV1 API Deployment

  ProductsV2Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProductsV2Method
    Properties:
      RestApiId: !Ref ProductsV2Api
      Description: ProductsV2 API Deployment

  OrdersDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - OrdersMethod
    Properties:
      RestApiId: !Ref OrdersApi
      Description: Orders API Deployment

  # API Gateway Stages
  ProductsV1Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ProductsV1Api
      DeploymentId: !Ref ProductsV1Deployment
      StageName: prod

  ProductsV2Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ProductsV2Api
      DeploymentId: !Ref ProductsV2Deployment
      StageName: prod

  OrdersStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref OrdersApi
      DeploymentId: !Ref OrdersDeployment
      StageName: prod

  # Lambda Permissions
  ProductsV1FunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProductsV1Function
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProductsV1Api}/*

  ProductsV2FunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProductsV2Function
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProductsV2Api}/*

  OrdersFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OrdersFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrdersApi}/*

  # API Gateway Custom Domain
  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref CertificateArn
      SecurityPolicy: "TLS_1_2"
      EndpointConfiguration:
        Types:
          - REGIONAL
      RoutingMode: "ROUTING_RULE_THEN_BASE_PATH_MAPPING"

  ProductsV1RoutingRule:
    Type: 'AWS::ApiGatewayV2::RoutingRule'
    Properties:
      DomainNameArn: !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiCustomDomain}"
      Priority: 1
      Conditions: 
        - MatchHeaders:
            AnyOf:
              - Header: "X-API-Version"
                ValueGlob: "v1"
        - MatchBasePaths:
            AnyOf:
              - "products"
      Actions: 
        - InvokeApi: 
            ApiId: !Ref ProductsV1Api
            Stage: !Ref ProductsV1Stage
            StripBasePath: true

  ProductsV2RoutingRule:
    Type: 'AWS::ApiGatewayV2::RoutingRule'
    Properties:
      DomainNameArn: !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiCustomDomain}"
      Priority: 2
      Conditions: 
        - MatchHeaders:
            AnyOf:
              - Header: "X-API-Version"
                ValueGlob: "v2"
        - MatchBasePaths:
            AnyOf:
              - "products"
      Actions: 
        - InvokeApi: 
            ApiId: !Ref ProductsV2Api
            Stage: !Ref ProductsV2Stage
            StripBasePath: true

  OrdersRoutingRule:
    Type: 'AWS::ApiGatewayV2::RoutingRule'
    Properties:
      DomainNameArn: !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiCustomDomain}"
      Priority: 300
      Conditions: 
        - MatchBasePaths:
            AnyOf:
              - "orders"
      Actions: 
        - InvokeApi: 
            ApiId: !Ref OrdersApi
            Stage: !Ref OrdersStage
            StripBasePath: true

  # Route53 Record
  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId

Outputs:
  CustomDomainUrl:
    Description: Custom domain URL
    Value: !Sub https://${DomainName}
