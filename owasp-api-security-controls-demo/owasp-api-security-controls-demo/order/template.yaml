AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: reInforce APS332 - Order service
Parameters:
  # Cognito parameters
  CognitoUserPoolClientName:
    Type: String
    Default: CoffeeShopUserPoolClient
  AdminEmail:
    Type: String
  MktgEmail:
    Type: String
  DatascientistEmail:
    Type: String
  Customer1Email:
    Type: String
  Customer2Email:
    Type: String
  
  # VPC config
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Order service VPC
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Order service subnet 1
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Order service subnet 2
  OrderServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Order service security group
  VpceDnsName:
    Type: String
    Description: VPC endpoint DNS name

  # Payments API config
  PaymentsApi:
    Type: String
    Description: Payments API DNS name  
  ApiStage:
    Type: String
    Description: API deployment stage

  # Fulfillment Queue config
  FulfillmentQArn:
    Type: String
    Description: Fulfillment queue arn
  FulfillmentQUrl:
    Type: String
    Description: Fulfillment queue URL

Globals:
  Api:
    TracingEnabled: true

  Function:
    Timeout: 10
    Runtime: python3.12
    Tracing: Active
    Architectures:
      - arm64
    Environment:
      Variables:
        POWERTOOLS_LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: OrderService

Resources:
  # Cognito resources
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: false
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      DeletionProtection: INACTIVE # For production usage set to ACTIVE to prevent accidental deletion of pool
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  CognitoUserPoolAdmin:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: admin
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId:
        Ref: CognitoUserPool
      UserAttributes:
        - Name: email
          Value:
            Ref: AdminEmail
        - Name: name
          Value: ArnavDesai

  CognitoUserPoolMktg:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: marketing
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId:
        Ref: CognitoUserPool
      UserAttributes:
        - Name: email
          Value:
            Ref: MktgEmail
        - Name: name
          Value: JaneDoe

  CognitoUserPoolDatascientist:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: datascientist
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId:
        Ref: CognitoUserPool
      UserAttributes:
        - Name: email
          Value:
            Ref: DatascientistEmail
        - Name: name
          Value: JohnDoe

  CognitoUserPoolCustomer1:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: mary
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId:
        Ref: CognitoUserPool
      UserAttributes:
        - Name: email
          Value:
            Ref: Customer1Email
        - Name: name
          Value: MaryMajor

  CognitoUserPoolCustomer2:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: paulo
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId:
        Ref: CognitoUserPool
      UserAttributes:
        - Name: email
          Value:
            Ref: Customer2Email
        - Name: name
          Value: PauloSantos

  CognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admin group
      GroupName: Admins
      UserPoolId: !Ref CognitoUserPool

  CognitoAdminGroupAttachement:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoAdminGroup
      Username: !Ref CognitoUserPoolAdmin
      UserPoolId: !Ref CognitoUserPool

  CognitoMarketingGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Marketing group
      GroupName: Marketing
      UserPoolId: !Ref CognitoUserPool

  CognitoMktgGroupAttachement:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoMarketingGroup
      Username: !Ref CognitoUserPoolMktg
      UserPoolId: !Ref CognitoUserPool

  CognitoDataScienceGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Data science group
      GroupName: Datascience
      UserPoolId: !Ref CognitoUserPool

  CognitoDatascienceGroupAttachement:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoDataScienceGroup
      Username: !Ref CognitoUserPoolDatascientist
      UserPoolId: !Ref CognitoUserPool

  # Order service
  DynamoDBVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref OrderServiceSecurityGroup

  OrderApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  OrderApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: Order API
      TracingEnabled: true
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      AccessLogSetting:
        DestinationArn: !GetAtt OrderApiLogGroup.Arn
        Format: '{ "requestId": "$context.requestId", "path": "$context.path", "routeKey": "$context.routeKey", "ip": "$context.identity.sourceIp", "requestTime": "$context.requestTime", "httpMethod": "$context.httpMethod","statusCode": $context.status }'

  OrderTableAccessRole:
    Type: AWS::IAM::Role
    Properties:
      Description: reInforce 2024 - APS332 - Order table access role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt OrderFunctionRole.Arn
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt OrderFunctionRole.Arn
            Action:
              - sts:TagSession
            Condition:
              StringLike:
                aws:RequestTag/UserID: '*'
      Path: /
      Policies:
        - PolicyName: OrderTableAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt OrderTable.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys:
                      - "${aws:PrincipalTag/UserID}"
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !GetAtt OrderTable.Arn

  OrderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: reInforce 2024 - APS332 - Order function default role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: PaymentsApiAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/POST/makePayment
        - PolicyName: FulfillmentQAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: 
                  - !Ref FulfillmentQArn

  OrderFunctionDenyEC2Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DenyEC2FromFunctionCode
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Resource: '*'
            Condition:
              ArnEquals:
                lambda:SourceFunctionArn:
                  - !GetAtt OrderFunction.Arn
      Roles:
        - !Ref OrderFunctionRole

  OrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: reInforce 2024 - APS332 - Order service
      Handler: index.lambda_handler
      CodeUri: src/
      Role: !GetAtt OrderFunctionRole.Arn
      # ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          RESOURCE_ACCESS_ROLE_ARN: !GetAtt OrderTableAccessRole.Arn
          ORDER_TABLE_NAME: !Ref OrderTable
          VPCE_DNS_NAME: !Ref VpceDnsName
          PAYMENTS_API_DNS_NAME: !Ref PaymentsApi
          API_STAGE: !Ref ApiStage
          FULFILLMENT_QUEUE_URL: !Ref FulfillmentQUrl
          DDB_VPCE_DNS_NAME: !Select [1, !Split [":", !Select [0, !GetAtt DynamoDBVpcEndpoint.DnsEntries]]]
      VpcConfig:
        SecurityGroupIds:
          - !Ref OrderServiceSecurityGroup
        SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      Events:
        CreateOrder:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /placeOrder
            Method: POST
        ListOrders:
          Type: Api
          Properties:
            RestApiId: !Ref OrderApi
            Path: /listOrders
            Method: GET

  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "order_date"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "user_id"
          KeyType: "HASH"
        - 
          AttributeName: "order_date"
          KeyType: "RANGE"
      SSESpecification:
        SSEEnabled: true

Outputs:
  OrderApi:
    Description: 'Order service API'
    Value: !Sub 'https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  OrderTableAccessRole:
    Description: 'Role to access order table'
    Value: !GetAtt OrderTableAccessRole.Arn
  OrderFunctionRole:
    Description: Lambda function role name
    Value : !Ref OrderFunctionRole
  CognitoUserPool:
    Description: Cognito user pool
    Value: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Description: Cognito user pool clinet
    Value: !Ref CognitoUserPoolClient
  OrderTableName:
    Description: Order table name
    Value: !Ref OrderTable
  OrderTableArn:
    Description: Order table name
    Value: !GetAtt OrderTable.Arn
